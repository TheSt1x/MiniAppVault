from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import asyncio
import json
import logging
import os
STATS_FILE = "stats.json"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = "BOT_TOKEN"
if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

MINI_APP_URL = "https://kk59k8cw-3000.euw.devtunnels.ms/"

def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(
        text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", 
        web_app=types.WebAppInfo(url=MINI_APP_URL)
    )
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        types.BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ])

async def on_shutdown():
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üêß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∏–Ω–≥–≤–∏–Ω –ö–ª–∏–∫–µ—Ä!\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Ä—ã–±—É!"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ –ü–∏–Ω–≥–≤–∏–Ω –ö–ª–∏–∫–µ—Ä</b>\n\n"
        "üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "- –ù–∞–∂–∏–º–∞–π –Ω–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å —Ä—ã–±—É\n"
        "- –£–ª—É—á—à–∞–π —É–¥–æ—á–∫—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞\n"
        "- –ü–æ–∫—É–ø–∞–π —É–ª—É—á—à–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n\n"
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π:</b>\n"
        "- –ü–∞—Å—Å–∏–≤–Ω—ã–µ: –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ä—ã–±—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "- –ê–∫—Ç–∏–≤–Ω—ã–µ: —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫\n\n"
        "üìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /stats"
    )
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    stats_text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        "üêü –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Ä—ã–±—ã: <b>0</b>\n"
        "üîº –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: <b>1</b>\n"
        "‚è± –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: <b>0/—Å–µ–∫</b>"
    )
    await message.answer(stats_text, parse_mode="HTML")
–Ø 
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def btn_help(message: types.Message):
    await cmd_help(message)

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_stats(message: types.Message):
    await cmd_stats(message)

@dp.message(lambda message: message.web_app_data is not None)
async def process_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
        
        if data.get("action") == "save_game":
            score = data.get("score", 0)
            level = data.get("level", 1)
            await message.answer(
                f"üéÆ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"üêü –†—ã–±—ã: {score}\n"
                f"üîº –£—Ä–æ–≤–µ–Ω—å: {level}",
                reply_markup=get_main_menu()
            )
        elif data.get("action") == "purchase":
            item = data.get("item")
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ: {item}")
            
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message()
async def other_messages(message: types.Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /help",
        reply_markup=get_main_menu()
    )

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())